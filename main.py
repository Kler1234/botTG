import telebot
import config
from telebot import types
#import requests
import random
import covid
import pydantic
from covid import Covid

#token
bot = telebot.TeleBot(config.TOKEN)

#starting bot
@bot.message_handler(commands = ['start'])
def welcome(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard= True, row_width = 2) #keyboard
    item1 = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìï")
    item2 = types.KeyboardButton("–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æüé≤")
    item3 = types.KeyboardButton("–ö–∞–∫ –¥–µ–ª–∞?üëÅ")
    item5 = types.KeyboardButton("COVID19üåé")

    markup.add(item1, item2, item3, item5)

#send sticker
    sticker = open('E:/bot/sticker/hello.png', 'rb')
    bot.send_sticker(message.chat.id, sticker)
#start message

    bot.send_message (message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {0.first_name}! \n–Ø –±–æ—Ç –ø–æ –∏–º–µ–Ω–∏ {1.first_name}\n'.format(message.from_user, bot.get_me()),
        parse_mode = 'html', reply_markup = markup)

@bot.message_handler(content_types = ['text'])
def lalala(message):
    if message.chat.type == 'private':
        if message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìï":
            bot.send_message(message.chat.id,'–Ø - –±–æ—Ç –ø–æ –∏–º–µ–Ω–∏ CollegePractice!\n–Ø –µ—Å—Ç—å –ø–æ–¥–æ–ø—ã—Ç–Ω—ã–π –∫—Ä–æ–ª–∏–∫ üêá')
        elif message.text == "–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æüé≤":
            bot.send_message(message.chat.id, str(random.randint(0,100)) + " üé≤")
        elif message.text == "–ö–∞–∫ –¥–µ–ª–∞?üëÅ":
            markup = types.InlineKeyboardMarkup(row_width = 2)
            inline1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ!üòÑ", callback_data = "good")
            inline2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å üò¢", callback_data = "bad")

            markup.add(inline1, inline2)

            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ!üòÑ\n–£ —Ç–µ–±—è –∫–∞–∫?', reply_markup=markup)
        elif message.text == "COVID19üåé":
            markupn = types.InlineKeyboardMarkup(row_width = 2)
            inline5 = types.InlineKeyboardButton("–°–®–ê", callback_data = "US")
            inline6 = types.InlineKeyboardButton("–†–æ—Å—Å–∏—è", callback_data = "rus")
            inline7 = types.InlineKeyboardButton("–ë–µ–ª–∞—Ä—É—Å—å", callback_data = "bel")
            inline8 = types.InlineKeyboardButton("–£–∫—Ä–∞–∏–Ω–∞", callback_data = "ukr")
            markupn.add(inline5, inline6, inline7, inline8)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–Ω–æ—Å—Ç—å", reply_markup=markupn)
        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')
    else:
    	bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å(')

@bot.callback_query_handler(func = lambda call:True)
def callback_inline(call):
    try:
        if call.data == "good":
            bot.send_message(call.message.chat.id, "–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä")
        elif call.data == "bad":
            bot.send_message(call.message.chat.id, "–ë—ã–≤–∞–µ—Ç üò¢\n–î–µ—Ä–∂–∏—Å—å!")

        if call.data == "US":
                covid = Covid(source="worldometers")
                location = covid.get_status_by_country_name("USA")
                bot.send_message(call.message.chat.id, f"–î–∞–Ω–Ω—ã–µ –ø–æ –°–®–ê üá∫üá∏:\n–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {location['confirmed']}\n–í—ã–ª–∏—á–∏–≤—à–∏—Ö—Å—è: {location['recovered']}\n–£–º–µ—Ä—à–∏—Ö: {location['deaths']}\n–ó–∞–±–æ–ª–µ–≤—à–∏—Ö –∑–∞ —Å—É—Ç–∫–∏: {location['new_cases']} ""\n\n\n\n\n\n\n\n")
        elif call.data == "rus":
                covid = Covid(source="worldometers")
                location = covid.get_status_by_country_name("russia")
                bot.send_message(call.message.chat.id, f"–î–∞–Ω–Ω—ã–µ –ø–æ –†–æ—Å—Å–∏–∏ üá∑üá∫:\n–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {location['confirmed']}\n–í—ã–ª–∏—á–∏–≤—à–∏—Ö—Å—è: {location['recovered']}\n–£–º–µ—Ä—à–∏—Ö: {location['deaths']}\n–ó–∞–±–æ–ª–µ–≤—à–∏—Ö –∑–∞ —Å—É—Ç–∫–∏: {location['new_cases']} ""\n\n\n\n\n\n\n\n")
        elif call.data == "bel":
                covid = Covid(source="worldometers")
                location = covid.get_status_by_country_name("belarus")
                bot.send_message(call.message.chat.id, f"–î–∞–Ω–Ω—ã–µ –ø–æ –ë–µ–ª–∞—Ä—É—Å–∏ üáßüáæ:\n–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {location['confirmed']}\n–í—ã–ª–∏—á–∏–≤—à–∏—Ö—Å—è: {location['recovered']}\n–£–º–µ—Ä—à–∏—Ö: {location['deaths']}\n–ó–∞–±–æ–ª–µ–≤—à–∏—Ö –∑–∞ —Å—É—Ç–∫–∏: {location['new_cases']} ""\n\n\n\n\n\n\n\n")
        elif call.data == "ukr":
                covid = Covid(source="worldometers")
                location = covid.get_status_by_country_name("ukraine")
                bot.send_message(call.message.chat.id, f"–î–∞–Ω–Ω—ã–µ –ø–æ –£–∫—Ä–∞–∏–Ω–µ üá∫üá¶:\n–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {location['confirmed']}\n–í—ã–ª–∏—á–∏–≤—à–∏—Ö—Å—è: {location['recovered']}\n–£–º–µ—Ä—à–∏—Ö: {location['deaths']}\n–ó–∞–±–æ–ª–µ–≤—à–∏—Ö –∑–∞ —Å—É—Ç–∫–∏: {location['new_cases']} ""\n\n\n\n\n\n\n\n")      
        else:
                covid = Covid(source="worldometers")
                covid.get_data()
                bot.send_message(call.message.chat.id, f"–î–∞–Ω–Ω—ã–µ –ø–æ –ú–∏—Ä—É:\n–ó–∞–±–æ–ª–µ–≤—à–∏—Ö: {location['confirmed']}\n–í—ã–ª–∏—á–∏–≤—à–∏—Ö—Å—è: {location['recovered']}\n–£–º–µ—Ä—à–∏—Ö: {location['deaths']}\n–ó–∞–±–æ–ª–µ–≤—à–∏—Ö –∑–∞ —Å—É—Ç–∫–∏: {location['new_cases']} ""\n\n\n\n\n\n\n\n")
    except Exception as e:
    	pass
bot.polling(none_stop = True)
